# Maintained by Ansible

# KSQL Configuration
listeners={{ksql_http_protocol}}://0.0.0.0:{{ksql_listener_port}}
{% for key, value in ksql.properties.items() %}
{{key}}={{value}}
{% endfor %}

# Kafka Broker Configuration
bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ hostvars[host]['ansible_host']|default(host) }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}{% endfor %}

security.protocol={{kafka_broker_listeners[ksql_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[ksql_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
# KSQL SSL properties shared with Kafka Broker
ssl.truststore.location={{ksql_truststore_path}}
ssl.truststore.password={{ksql_truststore_storepass}}
ssl.keystore.location={{ksql_keystore_path}}
ssl.keystore.password={{ksql_keystore_storepass}}
ssl.key.password={{ksql_keystore_keypass}}
{% endif %}
{% if kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
sasl.mechanism=PLAIN
sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
   username="{{sasl_plain_users.ksql.principal}}" password="{{sasl_plain_users.ksql.password}}";
{% endif %}
{% if kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
sasl.mechanism=GSSAPI
sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required \
   useKeyTab=true \
   storeKey=true \
   keyTab="{{kerberos.keytab_dir}}/{{ksql_kerberos_keytab_path | basename}}" \
   principal="{{ksql_kerberos_principal}}";
{% endif %}
{% if kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
sasl.mechanism=SCRAM-SHA-256
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
   username="{{sasl_scram_users.ksql.principal}}" password="{{sasl_scram_users.ksql.password}}";
{% endif %}
{% if kafka_broker_listeners[ksql_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'OAUTHBEARER' %}
sasl.mechanism=OAUTHBEARER
sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
   username="{{ksql_ldap_user}}" password="{{ksql_ldap_password}}" \
   metadataServerUrls="{% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ hostvars[host]['ansible_host']|default(host) }}:{{mds_port}}{% endfor %}";
{% endif %}

{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
# Schema Registry Configuration
ksql.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ hostvars[host]['ansible_host']|default(host) }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
ksql.schema.registry.ssl.truststore.location={{ksql_truststore_path}}
ksql.schema.registry.ssl.truststore.password={{ksql_truststore_storepass}}
ksql.schema.registry.ssl.keystore.location={{ksql_keystore_path}}
ksql.schema.registry.ssl.keystore.password={{ksql_keystore_storepass}}
ksql.schema.registry.ssl.key.password={{ksql_keystore_keypass}}
{% endif %}
{% if rbac_enabled|bool %}
ksql.schema.registry.basic.auth.credentials.source=USER_INFO
ksql.schema.registry.basic.auth.user.info={{ ksql_ldap_user }}:{{ ksql_ldap_password }}
{% endif %}
{% endif %}

# Monitoring Configuration
<<<<<<< HEAD
{% if ksql_metric_producer_interceptors_final|length > 0 %}
producer.interceptor.classes={{ksql_metric_producer_interceptors_final|join(',')}}
{% endif %}
{% if ksql_metric_consumer_interceptors_final|length > 0 %}
consumer.interceptor.classes={{ksql_metric_consumer_interceptors_final|join(',')}}
{% endif %}
{% if ksql_confluent_metrics_enabled|bool %}
confluent.monitoring.interceptor.bootstrap.servers={{ksql_confluent_metrics_bootstrap_servers}}
=======
confluent.monitoring.interceptor.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ hostvars[host]['ansible_host']|default(host) }}:{{kafka_broker_listeners[ksql_kafka_listener_name]['port']}}{% endfor %}
>>>>>>> support-host-alias

{% set config_prefix = 'confluent.monitoring.interceptor.' %}
{% set listener = ksql_confluent_metrics_listener %}
{% set truststore_path = ksql_truststore_path %}
{% set truststore_storepass = ksql_truststore_storepass %}
{% set keystore_path = ksql_keystore_path %}
{% set keystore_storepass = ksql_keystore_storepass %}
{% set keystore_keypass = ksql_keystore_keypass %}
{% set sasl_plain_username = sasl_plain_users.ksql.principal %}
{% set sasl_plain_password = sasl_plain_users.ksql.password %}
{% set sasl_scram_username = sasl_scram_users.ksql.principal %}
{% set sasl_scram_password = sasl_scram_users.ksql.password %}
{% set kerberos_keytab_path = ksql_kerberos_keytab_path %}
{% set kerberos_principal = ksql_kerberos_principal %}
{% set oauth_username = ksql_ldap_user %}
{% set oauth_password = ksql_ldap_password %}
{% include 'roles/confluent.kafka_broker/templates/kafka_client.j2' %}
{% endif %}

{% if rbac_enabled|bool %}
# RBAC Configuration
ksql.security.extension.class=io.confluent.ksql.security.KsqlConfluentSecurityExtension
rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
websocket.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
oauth.jwt.public.key.path={{rbac_enabled_public_pem_path}}
public.key.path={{rbac_enabled_public_pem_path}}

confluent.metadata.bootstrap.server.urls={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{mds_http_protocol}}://{{ hostvars[host]['ansible_host']|default(host) }}:{{mds_port}}{% endfor %}

confluent.metadata.public.key.path={{rbac_enabled_public_pem_path}}
confluent.metadata.basic.auth.user.info={{ ksql_ldap_user }}:{{ ksql_ldap_password }}
confluent.metadata.http.auth.credentials.provider=BASIC
{% endif %}
